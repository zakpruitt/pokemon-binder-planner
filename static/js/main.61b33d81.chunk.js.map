{"version":3,"sources":["components/BinderPage.js","components/SearchPanel.js","utils/SpriteUrls.js","components/BackgroundAnimation.js","App.js","index.js"],"names":["BinderPage","_ref","pageIndex","cards","onSlotClick","selectedSlot","addPage","deletePage","calculatePageValue","hoveredCardIndex","setHoveredCardIndex","useState","React","createElement","className","onClick","alert","map","card","idx","_card$tcgplayer","_card$tcgplayer$price","_card$tcgplayer$price2","isHovered","marketPrice","tcgplayer","prices","holofoil","market","key","onMouseEnter","onMouseLeave","Fragment","src","images","small","alt","name","toFixed","AVAILABLE_RARITIES","AVAILABLE_SETS","id","SearchPanel","onCardSelect","cardName","setCardName","rarity","setRarity","setSearch","setSetSearch","selectedSetId","setSelectedSetId","showSuggestions","setShowSuggestions","orderBy","setOrderBy","results","setResults","loading","setLoading","filteredSets","filter","s","toLowerCase","includes","buildQueryString","useCallback","trim","Boolean","join","onSubmit","async","e","preventDefault","query","apiUrl","encodeURIComponent","res","fetch","headers","X-Api-Key","data","json","error","console","type","value","onChange","target","placeholder","r","length","onMouseDown","setObj","handleSetSuggestionClick","number","SPRITE_URLS","Object","values","flatMap","pokemon","engName","eng","BackgroundAnimation","spriteUrl","getRandomSprite","Math","floor","random","style","backgroundImage","INITIAL_PAGE","Array","fill","App","pages","setPages","setSelectedSlot","addPageAt","index","prevPages","slice","deletePageAt","_","i","updateSlot","slotIndex","page","pIndex","slot","sIndex","reduce","total","exportBinder","binderData","_card$tcgplayer2","_card$tcgplayer2$pric","_card$tcgplayer2$pric2","set","image","price","navigator","clipboard","writeText","JSON","stringify","then","catch","err","importBinder","prompt","importedPages","parse","printBinder","printArea","document","getElementById","scrollContainer","querySelector","originalOverflow","overflow","window","print","open","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.61b33d81.chunk.js","sourcesContent":["// src/BinderPage.js\r\nimport React, { useState } from \"react\";\r\nimport \"../styles/BinderPage.css\";\r\n\r\nfunction BinderPage({ pageIndex, cards, onSlotClick, selectedSlot, addPage, deletePage, calculatePageValue }) {\r\n    const [hoveredCardIndex, setHoveredCardIndex] = useState(null);\r\n\r\n    return (\r\n        <div className=\"binder-page-container\">\r\n            <div className=\"binder-page-header\">\r\n                <h2 className=\"binder-page-title\">Page {pageIndex + 1}</h2>\r\n                <div className=\"page-buttons\">\r\n                    <button className=\"delete-page-button\" onClick={deletePage}>âˆ’</button>\r\n                    <button className=\"add-page-button\" onClick={addPage}>+</button>\r\n                    <button\r\n                        className=\"value-page-button\"\r\n                        onClick={() => alert(`Total Page Value: $${calculatePageValue()}`)}\r\n                    >\r\n                        $\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"binder-grid\">\r\n                {cards.map((card, idx) => {\r\n                    const isHovered = hoveredCardIndex === idx;\r\n                    const marketPrice = card?.tcgplayer?.prices?.holofoil?.market;\r\n\r\n                    return (\r\n                        <div\r\n                            key={idx}\r\n                            className={`binder-slot ${selectedSlot === idx ? \"selected\" : \"\"}`}\r\n                            onClick={() => onSlotClick(idx)}\r\n                            onMouseEnter={() => setHoveredCardIndex(idx)}\r\n                            onMouseLeave={() => setHoveredCardIndex(null)}\r\n                        >\r\n                            {card ? (\r\n                                <>\r\n                                    <img src={card.images.small} alt={card.name} />\r\n                                    {isHovered && marketPrice && (\r\n                                        <div className=\"card-price\">${marketPrice.toFixed(2)}</div>\r\n                                    )}\r\n                                </>\r\n                            ) : (\r\n                                <p>Empty</p>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinderPage;\r\n","// src/SearchPanel.js\r\nimport React, { useState, useCallback } from \"react\";\r\nimport \"../styles/SearchPanel.css\";\r\n\r\nconst AVAILABLE_RARITIES = [\r\n    \"\", \"Common\", \"Uncommon\", \"Rare\", \"Rare Holo\", \"Rare Holo V\",\r\n    \"Rare Holo VMAX\", \"Illustration Rare\", \"Special Illustration Rare\", \"Rare Secret\"\r\n];\r\n\r\nconst AVAILABLE_SETS = [\r\n    { id: \"sv1\", name: \"Scarlet & Violet\" },\r\n    { id: \"svp\", name: \"Scarlet & Violet Black Star Promos\" },\r\n    { id: \"sv2\", name: \"Paldea Evolved\" },\r\n    { id: \"sve\", name: \"Scarlet & Violet Energies\" },\r\n    { id: \"sv3\", name: \"Obsidian Flames\" },\r\n    { id: \"sv3pt5\", name: \"151\" },\r\n    { id: \"sv4\", name: \"Paradox Rift\" },\r\n    { id: \"sv4pt5\", name: \"Paldean Fates\" },\r\n    { id: \"sv5\", name: \"Temporal Forces\" },\r\n    { id: \"sv6\", name: \"Twilight Masquerade\" },\r\n    { id: \"sv6pt5\", name: \"Shrouded Fable\" },\r\n    { id: \"sv7\", name: \"Stellar Crown\" },\r\n    { id: \"sv8\", name: \"Surging Sparks\" },\r\n    { id: \"sv8pt5\", name: \"Prismatic Evolutions\" },\r\n];\r\n\r\nfunction SearchPanel({ onCardSelect }) {\r\n    const [cardName, setCardName] = useState(\"\");\r\n    const [rarity, setRarity] = useState(\"\");\r\n    const [setSearch, setSetSearch] = useState(\"\");\r\n    const [selectedSetId, setSelectedSetId] = useState(\"\");\r\n    const [showSuggestions, setShowSuggestions] = useState(false);\r\n    const [orderBy, setOrderBy] = useState(\"set.id,number\");\r\n    const [results, setResults] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const filteredSets = setSearch\r\n        ? AVAILABLE_SETS.filter(\r\n            (s) =>\r\n                s.id.toLowerCase().includes(setSearch.toLowerCase()) ||\r\n                s.name.toLowerCase().includes(setSearch.toLowerCase())\r\n        )\r\n        : [];\r\n\r\n    const buildQueryString = useCallback(() => {\r\n        return [\r\n            cardName.trim() && `name:\"${cardName}\"`,\r\n            rarity.trim() && `rarity:\"${rarity}\"`,\r\n            selectedSetId && `set.id:${selectedSetId}`,\r\n        ]\r\n            .filter(Boolean)\r\n            .join(\" AND \");\r\n    }, [cardName, rarity, selectedSetId]);\r\n\r\n    const handleSearch = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        const query = buildQueryString();\r\n        const apiUrl = `https://api.pokemontcg.io/v2/cards?q=${encodeURIComponent(query)}&orderBy=${orderBy}`;\r\n\r\n        try {\r\n            const res = await fetch(apiUrl, {\r\n                headers: { \"X-Api-Key\": \"YOUR_API_KEY_HERE\" },\r\n            });\r\n            const data = await res.json();\r\n            setResults(data.data || []);\r\n        } catch (error) {\r\n            console.error(\"Error fetching cards:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSetSearchChange = (e) => {\r\n        setSetSearch(e.target.value);\r\n        setShowSuggestions(true);\r\n        setSelectedSetId(\"\");\r\n    };\r\n\r\n    const handleSetSuggestionClick = (setObj) => {\r\n        setSelectedSetId(setObj.id);\r\n        setSetSearch(setObj.name);\r\n        setShowSuggestions(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-panel\">\r\n            <h2>Search Cards</h2>\r\n\r\n            {/* Search Form */}\r\n            <form onSubmit={handleSearch}>\r\n                <div className=\"form-group\">\r\n                    <label>Card Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={cardName}\r\n                        onChange={(e) => setCardName(e.target.value)}\r\n                        placeholder=\"e.g. Pikachu\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Rarity</label>\r\n                    <select value={rarity} onChange={(e) => setRarity(e.target.value)}>\r\n                        {AVAILABLE_RARITIES.map((r) => (\r\n                            <option key={r} value={r}>\r\n                                {r || \"(None)\"}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group set-container\">\r\n                    <label>Set</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={setSearch}\r\n                        onChange={handleSetSearchChange}\r\n                        placeholder=\"Type set ID or name\"\r\n                    />\r\n                    {showSuggestions && filteredSets.length > 0 && (\r\n                        <div className=\"set-suggestions\">\r\n                            {filteredSets.map((s) => (\r\n                                <div\r\n                                    key={s.id}\r\n                                    onMouseDown={(e) => e.preventDefault()}\r\n                                    onClick={() => handleSetSuggestionClick(s)}\r\n                                    className=\"suggestion\"\r\n                                >\r\n                                    <strong>{s.id}</strong> â€” {s.name}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Order By</label>\r\n                    <select value={orderBy} onChange={(e) => setOrderBy(e.target.value)}>\r\n                        <option value=\"set.id,number\">Set + Number</option>\r\n                        <option value=\"number\">Number</option>\r\n                        <option value=\"name\">Name</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n\r\n            {/* Loading Indicator or Search Results */}\r\n            {loading ? (\r\n                <div className=\"loading-indicator\">\r\n                    <div className=\"spinner\"></div>\r\n                </div>\r\n            ) : (\r\n                <div className=\"search-results\">\r\n                    {results.map((card) => (\r\n                        <div\r\n                            key={card.id}\r\n                            className=\"search-result-item\"\r\n                            onClick={() => onCardSelect(card)}\r\n                        >\r\n                            <img src={card.images.small} alt={card.name} />\r\n                            <div className=\"result-details\">\r\n                                <strong>{card.name}</strong>\r\n                                <p>\r\n                                    {card.number} - {card.rarity}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchPanel;\r\n","import data from '../data/sprite_data.json';\r\n\r\nconst REGULAR_BASE = 'https://raw.githubusercontent.com/msikma/pokesprite/master/pokemon-gen8/regular/';\r\nconst SHINY_BASE = 'https://raw.githubusercontent.com/msikma/pokesprite/master/pokemon-gen8/shiny/';\r\n\r\nexport const SPRITE_URLS = Object.values(data).flatMap(pokemon => {\r\n    const engName = pokemon.name.eng.toLowerCase();\r\n    return [\r\n        `${REGULAR_BASE}${engName}.png`,\r\n        `${SHINY_BASE}${engName}.png`\r\n    ];\r\n});\r\n","// src/BackgroundAnimation.js\r\nimport React, { useState } from \"react\";\r\nimport \"../styles/BackgroundAnimation.css\";\r\nimport { SPRITE_URLS } from \"../utils/SpriteUrls\";\r\n\r\nfunction BackgroundAnimation() {\r\n    const getRandomSprite = () =>\r\n        SPRITE_URLS[Math.floor(Math.random() * SPRITE_URLS.length)];\r\n\r\n    const [spriteUrl] = useState(getRandomSprite);\r\n\r\n    return (\r\n        <div\r\n            className=\"background-animation\"\r\n            style={{ backgroundImage: spriteUrl ? `url(${spriteUrl})` : \"none\" }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default BackgroundAnimation;\r\n","// src/App.js\r\nimport React, { useState, useCallback } from \"react\";\r\nimport BinderPage from \"./components/BinderPage\";\r\nimport SearchPanel from \"./components/SearchPanel\";\r\nimport BackgroundAnimation from \"./components/BackgroundAnimation\";\r\nimport \"./styles/App.css\";\r\n\r\nconst INITIAL_PAGE = () => Array(9).fill(null);\r\n\r\nfunction App() {\r\n    const [pages, setPages] = useState([INITIAL_PAGE(), INITIAL_PAGE()]);\r\n    const [selectedSlot, setSelectedSlot] = useState(null);\r\n\r\n    const addPageAt = useCallback((index) => {\r\n        setPages((prevPages) => [\r\n            ...prevPages.slice(0, index + 1),\r\n            INITIAL_PAGE(),\r\n            ...prevPages.slice(index + 1),\r\n        ]);\r\n    }, []);\r\n\r\n    const deletePageAt = useCallback((index) => {\r\n        setPages((prevPages) =>\r\n            prevPages.length > 1 ? prevPages.filter((_, i) => i !== index) : prevPages\r\n        );\r\n    }, []);\r\n\r\n    const updateSlot = useCallback((pageIndex, slotIndex, card) => {\r\n        setPages((prevPages) =>\r\n            prevPages.map((page, pIndex) =>\r\n                pIndex === pageIndex\r\n                    ? page.map((slot, sIndex) => (sIndex === slotIndex ? card : slot))\r\n                    : page\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    const calculatePageValue = useCallback((page) =>\r\n            page.reduce(\r\n                (total, card) =>\r\n                    total + (card?.tcgplayer?.prices?.holofoil?.market || 0),\r\n                0\r\n            ).toFixed(2),\r\n        []);\r\n\r\n    const exportBinder = useCallback(() => {\r\n        const binderData = pages.map((page) =>\r\n            page.map((card) =>\r\n                card\r\n                    ? {\r\n                        name: card.name,\r\n                        set: card.set,\r\n                        image: card.images.small,\r\n                        price: card.tcgplayer?.prices?.holofoil?.market || \"N/A\",\r\n                    }\r\n                    : null\r\n            )\r\n        );\r\n\r\n        navigator.clipboard.writeText(JSON.stringify(binderData))\r\n            .then(() => alert(\"Binder exported to clipboard!\"))\r\n            .catch((err) => alert(\"Export failed: \" + err));\r\n    }, [pages]);\r\n\r\n    const importBinder = useCallback(() => {\r\n        const data = prompt(\"Paste your binder data:\");\r\n        if (!data) return;\r\n\r\n        try {\r\n            const importedPages = JSON.parse(data).map((page) =>\r\n                page.map((card) =>\r\n                    card\r\n                        ? {\r\n                            name: card.name,\r\n                            set: card.set,\r\n                            images: { small: card.image },\r\n                            tcgplayer: { prices: { holofoil: { market: card.price } } },\r\n                        }\r\n                        : null\r\n                )\r\n            );\r\n            setPages(importedPages);\r\n        } catch {\r\n            alert(\"Invalid data! Please check your input.\");\r\n        }\r\n    }, []);\r\n\r\n    const printBinder = useCallback(() => {\r\n        const printArea = document.getElementById(\"printable-binder\");\r\n        const scrollContainer = document.querySelector(\".pages-scroll-area\");\r\n\r\n        if (!printArea) {\r\n            alert(\"Error: Printable binder section not found.\");\r\n            return;\r\n        }\r\n\r\n        const originalOverflow = scrollContainer.style.overflow;\r\n        scrollContainer.style.overflow = \"visible\";\r\n\r\n        window.print();\r\n\r\n        scrollContainer.style.overflow = originalOverflow;\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <BackgroundAnimation />\r\n            <div className=\"app-container\">\r\n                <div className=\"main-layout\">\r\n                    <div className=\"left-section\">\r\n                        <div className=\"pages-scroll-area\">\r\n                            <div id=\"printable-binder\">\r\n                                {pages.map((page, pageIndex) => (\r\n                                    <BinderPage\r\n                                        key={pageIndex}\r\n                                        pageIndex={pageIndex}\r\n                                        cards={page}\r\n                                        selectedSlot={selectedSlot?.pageIndex === pageIndex ? selectedSlot.slotIndex : null}\r\n                                        onSlotClick={(slotIndex) => setSelectedSlot({pageIndex, slotIndex})}\r\n                                        addPage={() => addPageAt(pageIndex)}\r\n                                        deletePage={() => deletePageAt(pageIndex)}\r\n                                        calculatePageValue={() => calculatePageValue(page)}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"controls\">\r\n                            <button onClick={exportBinder}>Export Binder</button>\r\n                            <button onClick={importBinder}>Import Binder</button>\r\n                            <button onClick={printBinder}>Print Binder</button>\r\n                            <button\r\n                                onClick={() => window.open(\"https://github.com/zakpruitt/pokemon-binder-planner\", \"_blank\")}\r\n                            >\r\n                                GitHub Repo\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"right-search-panel\">\r\n                        <SearchPanel\r\n                            onCardSelect={(card) => {\r\n                                if (selectedSlot) {\r\n                                    updateSlot(selectedSlot.pageIndex, selectedSlot.slotIndex, card);\r\n                                    setSelectedSlot(null);\r\n                                } else {\r\n                                    alert(\"Please click a binder slot first.\");\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}